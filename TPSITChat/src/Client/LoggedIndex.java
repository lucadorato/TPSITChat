/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Client;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.util.ArrayList;
import javax.swing.*;
import javax.swing.border.LineBorder;
import java.awt.*;


/**
 *
 * @author lucad
 */
public class LoggedIndex extends javax.swing.JFrame {

     private ArrayList<String> Contacts;
     private ArrayList<JLabel> LContacts;
     private String LocalUser;
     private ArrayList<ArrayList<Message>> Messages;
     private int fixedMessageYOffset = 25;
     private int YLastMessage = 0;
     private final int MaxMessageWidth = 170;
     private final int RemoteSenderStartOffsetMessage = 200;
     private final int LocalSenderStartOffsetMessage = 0;
     private int SingleLineMessageHeight = 18;
     private final int ContactHeight = 50;
     private final int ContactWidth = 170;
    /**
     * Creates new form LoggedIndex
     */
    public LoggedIndex() {
        initComponents();
        
        InitArrayList();
    }
    
    /**
     * @brief: InitArrayList, stub function to initialize contacts and messages
     * @param: void
     * @return: void
     */
    private void InitArrayList()
    {
        LocalUser = "LocalUser";
        Contacts = new ArrayList<String>();
        LContacts = new ArrayList<JLabel>();
        for(int i = 0; i<10;i++)
        {
            Contacts.add("Contact"+i);
        }
        
        Messages = new ArrayList<ArrayList<Message>>();
        for(int i = 0; i<10;i++)
        {
            ArrayList<Message> ContMessages = new ArrayList<Message>();
            for(int j = 0; j<5;j++)
            {
                if(j%2 == 0)
                    ContMessages.add(new Message("Message"+(j*(i+1)),LocalUser));
                else
                    ContMessages.add(new Message("Message"+(j*(i+1)),"RemoteUser"));
            }
            Messages.add(ContMessages);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPaneChatScreen = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextAreaInputChat = new javax.swing.JTextArea();
        jButtonSend = new javax.swing.JButton();
        jScrollContacts = new javax.swing.JScrollPane();
        JPanelContacts = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        javax.swing.GroupLayout jPaneChatScreenLayout = new javax.swing.GroupLayout(jPaneChatScreen);
        jPaneChatScreen.setLayout(jPaneChatScreenLayout);
        jPaneChatScreenLayout.setHorizontalGroup(
            jPaneChatScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 415, Short.MAX_VALUE)
        );
        jPaneChatScreenLayout.setVerticalGroup(
            jPaneChatScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 317, Short.MAX_VALUE)
        );

        jScrollPane2.setViewportView(jPaneChatScreen);

        jTextAreaInputChat.setEditable(false);
        jTextAreaInputChat.setColumns(20);
        jTextAreaInputChat.setLineWrap(true);
        jTextAreaInputChat.setRows(5);
        jTextAreaInputChat.setWrapStyleWord(true);
        jTextAreaInputChat.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextAreaInputChat.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jScrollPane3.setViewportView(jTextAreaInputChat);

        jButtonSend.setText("Send");
        jButtonSend.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonSendMouseClicked(evt);
            }
        });
        jButtonSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSendActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonSend, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jButtonSend, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        jScrollContacts.setName("JScrollContacts"); // NOI18N

        JPanelContacts.setAutoscrolls(true);

        javax.swing.GroupLayout JPanelContactsLayout = new javax.swing.GroupLayout(JPanelContacts);
        JPanelContacts.setLayout(JPanelContactsLayout);
        JPanelContactsLayout.setHorizontalGroup(
            JPanelContactsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 143, Short.MAX_VALUE)
        );
        JPanelContactsLayout.setVerticalGroup(
            JPanelContactsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 441, Short.MAX_VALUE)
        );

        jScrollContacts.setViewportView(JPanelContacts);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollContacts, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollContacts)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @brief: formWindowOpened This function is an handle funciton that will manage the following scenario: 
     * When the user is logged on the new opening window 
     * it is neede to load the chatting contacts in the left contacts scroll bar
     * @param: evt [input]: the object event that will trigger this handle action
     * @return: void
     */
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        
        
        JPanelContacts.setLayout(null); //set Layout null to the JPanel contact in order to manage contact position using x,y coordinates
        JPanelContacts.setBackground(Color.LIGHT_GRAY);
        //jScrollContacts.setViewportView(JPanelContacts);
        jScrollContacts.setVerticalScrollBarPolicy(
                JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED); //set only the vertical scroll
        //Add a contact for each contact saved in the arrayList Contacts
        for(int i = 0; i<Contacts.size(); i++)
        {
            AddContact(Contacts.get(i),LContacts.size());
        }
        
    }//GEN-LAST:event_formWindowOpened

    private void jButtonSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSendActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonSendActionPerformed

    /**
     * @brief: Send Button Click Handle Function
     * @param: evt [input0]
     * @return: void
     */
    private void jButtonSendMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonSendMouseClicked
        // TODO add your handling code here:
        String sMessage = jTextAreaInputChat.getText();
        if(sMessage.length()!=0)
            AddChatText(sMessage, LocalUser);
    }//GEN-LAST:event_jButtonSendMouseClicked

    /**
     * @brief: Contact Mouse Clicked handle function
     * @param evt [input]
     * @return: void
     */
    private void jLableIMouseClicked(java.awt.event.MouseEvent evt) {                                      
        
        jTextAreaInputChat.setEditable(true);
        YLastMessage = 0;  // reset the Last Message y coordinate
        //remove all message in Jpanel Chat screen and refresh it
        jPaneChatScreen.removeAll(); 
        jPaneChatScreen.revalidate();
        jPaneChatScreen.repaint();
        ////set Layout null to the JPanel contact in order to manage messages position using x,y coordinates
        jPaneChatScreen.setLayout(null);
        jPaneChatScreen.setBackground(Color.LIGHT_GRAY);
        jPaneChatScreen.setAutoscrolls(true);
        //get the event source (the initiator of the event, to understand which contact has been clicked)
        JLabel name = (JLabel)evt.getSource();
        //the name has been set as the index of the Messages arrayList in witch it has been added
        int JLIdx = Integer.parseInt(name.getName());
        //for each message associated to the clicked contact add a message in the JPaneChatScreen
        for(int i = 0; i<Messages.get(JLIdx).size();i++)
        {
            AddChatText(Messages.get(JLIdx).get(i).getMsg(), Messages.get(JLIdx).get(i).getSender());
        }
    }
    
    /**
     * @brief: Add a message to the Chat Message area
     * @param text [input]: the mesasage text to add
     * @param sender [input]: the sender of the message [local or remote sender]
     */
    private void AddChatText(String text, String sender)
    {
        //create a new label with the message (this structure has been used just as app variable in order to understand the length of the message in pixel unit)
        JLabel MessLabelApp = new JLabel(text);
        //create a JtextArea not editable to add in the Chat screen
        JTextArea MessTextArea = new JTextArea(text);
        MessTextArea.setEditable(false);
        MessTextArea.setBorder(null);
        //set the text area with the line wrap in order to fix the width and perform an endline on long message
        MessTextArea.setWrapStyleWord(true);
        MessTextArea.setLineWrap(true);
        // set the color of the messageText and set it as opaque
        MessTextArea.setBackground(Color.GREEN);
        MessTextArea.setOpaque(true);
        //Choose the position of the added text considering the last message text to chose the right y coodinate
        //and the sender to chose the right x coordinate
        if(sender.equals(LocalUser))
            MessTextArea.setBounds(LocalSenderStartOffsetMessage, YLastMessage, MaxMessageWidth, (SingleLineMessageHeight*((MessLabelApp.getPreferredSize().width/MaxMessageWidth)+1)));
        else
            MessTextArea.setBounds(RemoteSenderStartOffsetMessage, YLastMessage, MaxMessageWidth, (SingleLineMessageHeight*((MessLabelApp.getPreferredSize().width/MaxMessageWidth)+1)));
        jPaneChatScreen.add(MessTextArea);

        //update the last y coordinate of the message
        YLastMessage+= (SingleLineMessageHeight*((MessLabelApp.getPreferredSize().width/MaxMessageWidth)+1) + fixedMessageYOffset);
        //update the y size of the scroll bar
        jPaneChatScreen.setPreferredSize(new Dimension(319, YLastMessage+SingleLineMessageHeight));
        jPaneChatScreen.revalidate();
        jPaneChatScreen.repaint();
        //clear the input text area
        jTextAreaInputChat.selectAll();
        jTextAreaInputChat.replaceSelection("");
    }

    /**
     * @brief: Add a new contact to the contact scroll bar
     * @param contact [input] the String of the contact to add
     * @param ContatIdx [input] the index of the arrayList of the JLable contact
     * @return: void
     */
    private void AddContact(String contact, int ContatIdx)
    {
        //Add the new contact in an arrayList of JLable
        LContacts.add(new JLabel(contact));
        //Set the JLable name as the index value of the arraylist
        LContacts.get(ContatIdx).setName(String.valueOf(ContatIdx));
        //set the contact Jlable size
        LContacts.get(ContatIdx).setBounds(0,0,ContactWidth,ContactHeight);
        //Add a listener to trigger the click contact event
        LContacts.get(ContatIdx).addMouseListener(new java.awt.event.MouseAdapter() {
            
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                
                jLableIMouseClicked(evt);
            }
        });
        //Add a new jpanel to the contact scroll bar
        JPanel JPSingleContact = new JPanel();
        JPSingleContact.setLayout(null);
        JPSingleContact.setBackground(Color.WHITE);
        JPSingleContact.setBounds(0,ContatIdx*ContactHeight,ContactWidth,ContactHeight);
        JPSingleContact.setBorder(new LineBorder(Color.RED));
        JPSingleContact.add(LContacts.get(ContatIdx));
        JPanelContacts.add(JPSingleContact);
        //resize the jpanel scroll bar considering the new added contact
        JPanelContacts.setPreferredSize(new Dimension(70, ContatIdx*ContactHeight+ContactHeight));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel JPanelContacts;
    private javax.swing.JButton jButtonSend;
    private javax.swing.JPanel jPaneChatScreen;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollContacts;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextAreaInputChat;
    // End of variables declaration//GEN-END:variables
}
